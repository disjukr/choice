{
    "comment": "The parser for Choi's programming language",
    "author": "JongChan Choi",
    "lex": {
        "macros": {
            "octal": "0[0-9]+",
            "hexadecimal": "0[Xx][0-9A-Fa-f]+",
            "decimal": "\\d*\\.?\\d+(?:[Ee](?:[+-]?\\d+)?)?"
        },
        "rules": [
            ["\\s+", ""],
            ["\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\/", ""],
            ["(?:\\/\\/|#).*(?=\\r\\n|\\n|$)", ""],
            ["{octal}|{hexadecimal}|{decimal}", "return 'NUMBER'"],
            ["\"([^\\\\\"]|\\\\.)*\"|'([^\\\\']|\\\\.)*'", "return 'STRING'"],
            ["\\/(?![\\s=])[^[\\/\\n\\\\]*((\\\\[\\s\\S]|\\[[^\\]\\n\\\\]*(\\\\[\\s\\S][^\\]\\n\\\\]*)*])[^[\\/\\n\\\\]*)*\\/[gimy]{0,4}", "return 'REGEX'"],
            ["\\b(true|false)\\b", "return 'BOOLEAN'"],
            ["\\b(var)\\b", "return 'VAR'"],
            ["\\b(val|const)\\b", "return 'VAL'"],
            ["\\b(func(tion)?)\\b", "return 'FUNC'"],
            ["\\b(if)\\b", "return 'IF'"],
            ["\\b(else)\\b", "return 'ELSE'"],
            ["\\b(loop)\\b", "return 'LOOP'"],
            ["\\b(while)\\b", "return 'WHILE'"],
            ["\\b(for)\\b", "return 'FOR'"],
            ["\\b(null)\\b", "return 'NULL'"],
            ["\\b(undefined)\\b", "return 'UNDEFINED'"],
            ["\\b(returns?)\\b|->", "return 'RETURN'"],
            ["\\b(break)\\b", "return 'BREAK'"],
            ["\\b(continue)\\b", "return 'CONTINUE'"],
            ["\\b(match)\\b", "return 'MATCH'"],
            ["\\b(new)\\b", "return 'NEW'"],
            ["\\b(typeof)\\b", "return 'TYPEOF'"],
            ["\\b(instanceof)\\b", "return 'INSTANCEOF'"],
            ["\\b(in)\\b", "return 'IN'"],
            ["[$_A-Za-z][$_0-9A-Za-z]*", "return 'IDENTIFIER'"],
            ["\\*=", "return '*='"],
            ["/=", "return '/='"],
            ["%=", "return '%='"],
            ["\\+=", "return '+='"],
            ["-=", "return '-='"],
            ["<<=", "return '<<='"],
            [">>>=", "return '>>>='"],
            [">>=", "return '>>='"],
            ["&=", "return '&='"],
            ["\\^=", "return '^='"],
            ["\\|=", "return '|='"],
            ["\\*", "return '*'"],
            ["/", "return '/'"],
            ["%", "return '%'"],
            ["\\+\\+", "return '++'"],
            ["\\+", "return '+'"],
            ["--", "return '--'"],
            ["-", "return '-'"],
            ["~", "return '~'"],
            ["===", "return '==='"],
            ["==", "return '=='"],
            ["=", "return '='"],
            ["!==", "return '!=='"],
            ["!=", "return '!='"],
            ["!", "return '!'"],
            [">>>", "return '>>>'"],
            [">>", "return '>>'"],
            [">=", "return '>='"],
            [">", "return '>'"],
            ["<<", "return '<<'"],
            ["<=", "return '<='"],
            ["<", "return '<'"],
            ["&&", "return '&&'"],
            ["&", "return '&'"],
            ["\\|\\|", "return '||'"],
            ["\\|", "return '|'"],
            ["\\^", "return '^'"],
            ["\\{", "return '{'"],
            ["\\}", "return '}'"],
            ["\\[", "return '['"],
            ["\\]", "return ']'"],
            ["\\(", "return '('"],
            ["\\)", "return ')'"],
            ["\\?", "return '?'"],
            [":", "return ':'"],
            [";", "return ';'"],
            ["\\,", "return ','"],
            ["\\.", "return '.'"],
            ["`", "return '`'"],
            ["@0", "return 'CALLEE'"],
            ["@([1-9][0-9]*)", "return 'ARGUMENT'"],
            ["@", "return 'ARGUMENTS'"]
        ]
    },
    "start": "ast",
    "bnf": {
        "ast": [["statements", "return $1"]],
        "statement": [
            ["var_statement", "$$ = $1"],
            ["val_statement", "$$ = $1"],
            ["return_statement", "$$ = $1"],
            ["func_statement", "$$ = $1"],
            ["if_else_statement", "$$ = $1"],
            ["break_statement", "$$ = $1"],
            ["continue_statement", "$$ = $1"],
            ["loop_statement", "$$ = $1"],
            ["while_statement", "$$ = $1"],
            ["for_statement", "$$ = $1"],
            ["expression ;", "$$ = $1"],
            [";", "$$ = $1"]
        ],
        "statements": [
            ["statement", "$$ = [$1]"],
            ["statements statement", "$1.push($2); $$ = $1"]
        ],
        "block_statements": [
            ["{ statements }", "$$ = $2"]
        ],
        "primary_expression": [
            ["IDENTIFIER", "$$ = $1"],
            ["value", "$$ = $1"],
            ["match_expression", "$$ = $1"],
            ["( expression )", "$$ = $2"],
            ["CALLEE", "$$ = 'arguments.callee'"],
            [
                "ARGUMENT",
                "$$ = {type: 'argument', index: $1.substr(1)}"
            ],
            ["ARGUMENTS", "$$ = 'arguments'"]
        ],
        "access_call_expression": [
            ["primary_expression", "$$ = $1"],
            [
                "access_call_expression ` [ expression ]",
                "$$ = {type: 'choice_access', expression: $1, field: $4}"
            ],
            [
                "access_call_expression ` STRING",
                "$$ = {type: 'choice_access', expression: $1, field: $3}"
            ],
            [
                "access_call_expression ` IDENTIFIER",
                "$$ = {type: 'choice_access', expression: $1, field: '\"' + $3 + '\"'}"
            ],
            [
                "access_call_expression [ expression ]",
                "$$ = {type: 'access', expression: $1, field: $3}"
            ],
            [
                "access_call_expression . STRING",
                "$$ = {type: 'access', expression: $1, field: $3}"
            ],
            [
                "access_call_expression . IDENTIFIER",
                "$$ = {type: 'dot_access', expression: $1, field: $3}"
            ],
            [
                "access_call_expression ( )",
                "$$ = {type: 'call', callee: $1, arguments: []}"
            ],
            [
                "access_call_expression ( arguments )",
                "$$ = {type: 'call', callee: $1, arguments: $3}"
            ]
        ],
        "new_expression": [
            ["access_call_expression", "$$ = $1"],
            [
                "NEW access_call_expression",
                "$$ = {type: 'new', expression: $2, arguments: []}"
            ],
            [
                "NEW access_call_expression ( )",
                "$$ = {type: 'new', expression: $2, arguments: []}"
            ],
            [
                "NEW access_call_expression ( arguments )",
                "$$ = {type: 'new', expression: $2, arguments: $4}"
            ]
        ],
        "postfix_expression": [
            ["new_expression", "$$ = $1"],
            [
                "postfix_expression ++",
                "$$ = {type: 'post++', expression: $1}"
            ],
            [
                "postfix_expression --",
                "$$ = {type: 'post--', expression: $1}"
            ]
        ],
        "prefix_expression": [
            ["postfix_expression", "$$ = $1"],
            [
                "TYPEOF prefix_expression",
                "$$ = {type: 'typeof', expression: $2}"
            ],
            [
                "~ prefix_expression",
                "$$ = {type: 'pre~', expression: $2}"
            ],
            [
                "! prefix_expression",
                "$$ = {type: 'pre!', expression: $2}"
            ],
            [
                "+ prefix_expression",
                "$$ = {type: 'pre+', expression: $2}"
            ],
            [
                "- prefix_expression",
                "$$ = {type: 'pre-', expression: $2}"
            ],
            [
                "++ prefix_expression",
                "$$ = {type: 'pre++', expression: $2}"
            ],
            [
                "-- prefix_expression",
                "$$ = {type: 'pre--', expression: $2}"
            ]
        ],
        "multiplicative_expression": [
            ["prefix_expression", "$$ = $1"],
            [
                "multiplicative_expression primary_expression",
                "$$ = {type: '*', left: $1, right: $2}"
            ],
            [
                "multiplicative_expression * prefix_expression",
                "$$ = {type: '*', left: $1, right: $3}"
            ],
            [
                "multiplicative_expression / prefix_expression",
                "$$ = {type: '/', left: $1, right: $3}"
            ],
            [
                "multiplicative_expression % prefix_expression",
                "$$ = {type: '%', left: $1, right: $3}"
            ]
        ],
        "additive_expression": [
            ["multiplicative_expression", "$$ = $1"],
            [
                "additive_expression + multiplicative_expression",
                "$$ = {type: '+', left: $1, right: $3}"
            ],
            [
                "additive_expression - multiplicative_expression",
                "$$ = {type: '-', left: $1, right: $3}"
            ]
        ],
        "shift_expression": [
            ["additive_expression", "$$ = $1"],
            [
                "shift_expression << additive_expression",
                "$$ = {type: '<<', left: $1, right: $3}"
            ],
            [
                "shift_expression >> additive_expression",
                "$$ = {type: '>>', left: $1, right: $3}"
            ],
            [
                "shift_expression >>> additive_expression",
                "$$ = {type: '>>>', left: $1, right: $3}"
            ]
        ],
        "relational_expression": [
            ["shift_expression", "$$ = $1"],
            [
                "relational_expression < shift_expression",
                "$$ = {type: '<', left: $1, right: $3}"
            ],
            [
                "relational_expression > shift_expression",
                "$$ = {type: '>', left: $1, right: $3}"
            ],
            [
                "relational_expression <= shift_expression",
                "$$ = {type: '<=', left: $1, right: $3}"
            ],
            [
                "relational_expression >= shift_expression",
                "$$ = {type: '>=', left: $1, right: $3}"
            ],
            [
                "relational_expression INSTANCEOF shift_expression",
                "$$ = {type: 'instanceof', left: $1, right: $3}"
            ],
            [
                "relational_expression IN shift_expression",
                "$$ = {type: 'in', left: $1, right: $3}"
            ]
        ],
        "equality_expression": [
            ["relational_expression", "$$ = $1"],
            [
                "equality_expression == relational_expression",
                "$$ = {type: '==', left: $1, right: $3}"
            ],
            [
                "equality_expression != relational_expression",
                "$$ = {type: '!=', left: $1, right: $3}"
            ],
            [
                "equality_expression === relational_expression",
                "$$ = {type: '===', left: $1, right: $3}"
            ],
            [
                "equality_expression !== relational_expression",
                "$$ = {type: '!==', left: $1, right: $3}"
            ]
        ],
        "bitwise_and_expression": [
            ["equality_expression", "$$ = $1"],
            [
                "bitwise_and_expression & equality_expression",
                "$$ = {type: '&', left: $1, right: $3}"
            ]
        ],
        "bitwise_xor_expression": [
            ["bitwise_and_expression", "$$ = $1"],
            [
                "bitwise_xor_expression ^ bitwise_and_expression",
                "$$ = {type: '^', left: $1, right: $3}"
            ]
        ],
        "bitwise_or_expression": [
            ["bitwise_xor_expression", "$$ = $1"],
            [
                "bitwise_or_expression | bitwise_xor_expression",
                "$$ = {type: '|', left: $1, right: $3}"
            ]
        ],
        "logical_and_expression": [
            ["bitwise_or_expression", "$$ = $1"],
            [
                "logical_and_expression && bitwise_or_expression",
                "$$ = {type: '&&', left: $1, right: $3}"
            ]
        ],
        "logical_or_expression": [
            ["logical_and_expression", "$$ = $1"],
            [
                "logical_or_expression || logical_and_expression",
                "$$ = {type: '||', left: $1, right: $3}"
            ]
        ],
        "ternary_expression": [
            ["logical_or_expression", "$$ = $1"],
            [
                "logical_or_expression ? expression : ternary_expression",
                "$$ = {type: 'ternary', condition: $1, 'true': $3, 'false': $5}"
            ]
        ],
        "assignment_operator": [
            ["=", "$$ = $1"],
            ["*=", "$$ = $1"],
            ["/=", "$$ = $1"],
            ["%=", "$$ = $1"],
            ["+=", "$$ = $1"],
            ["-=", "$$ = $1"],
            ["<<=", "$$ = $1"],
            [">>=", "$$ = $1"],
            [">>>=", "$$ = $1"],
            ["&=", "$$ = $1"],
            ["^=", "$$ = $1"],
            ["|=", "$$ = $1"]
        ],
        "assignment_expression": [
            ["ternary_expression", "$$ = $1"],
            [
                "primary_expression assignment_operator assignment_expression",
                "$$ = {type: $2, left: $1, right: $3}"
            ]
        ],
        "expression_without_comma": [
            ["assignment_expression", "$$ = $1"]
        ],
        "expression": [
            ["expression_without_comma", "$$ = $1"],
            [
                "expression , expression_without_comma",
                "$$ = {type: ',', left: $1, right: $3}"
            ]
        ],
        "match_expression": [
            [
                "MATCH ( expression ) { match_cases }",
                "$$ = {type: 'match', input: $3, cases: $6}"
            ]
        ],
        "match_cases": [
            ["match_cases_without_tail", "$$ = $1"],
            [
                "match_cases_without_tail , match_tail",
                "$1.push($3); $$ = $1"
            ]
        ],
        "match_cases_without_tail": [
            ["match_case", "$$ = [$1]"],
            ["match_cases_without_tail , match_case", "$1.push($3); $$ = $1"]
        ],
        "match_case": [
            [
                "match_condition RETURN expression_without_comma",
                "$$ = {type: 'match_case', condition: $1, expression: $3}"
            ]
        ],
        "match_tail": [
            ["expression_without_comma", "$$ = $1"]
        ],
        "match_condition": [
            [
                "= value",
                "$$ = {type: '=', value:$2}"
            ],
            [
                "value ~ value",
                "$$ = {type: '~', left: $1, right: $3}"
            ],
            [
                "match_condition | match_condition",
                "$$ = {type: '|', left: $1, right: $3}"
            ],
            [
                "{ expression }",
                "$$ = {type: '{}', expression: $2}"
            ]
        ],
        "key_value_pair": [
            [
                "IDENTIFIER : expression_without_comma",
                "$$ = {type: 'member', key: $1, value: $3}"
            ],
            [
                "STRING : expression_without_comma",
                "$$ = {type: 'member', key: $1, value: $3}"
            ]
        ],
        "members": [
            ["key_value_pair", "$$ = [$1]"],
            [
                "members , key_value_pair",
                "$1.push($3); $$ = $1"
            ]
        ],
        "arguments": [
            ["expression_without_comma", "$$ = [$1]"],
            [
                "arguments , expression_without_comma",
                "$1.push($3); $$ = $1"
            ]
        ],
        "parameters": [
            ["IDENTIFIER", "$$ = [$1]"],
            [
                "parameters , IDENTIFIER",
                "$1.push($3); $$ = $1"
            ]
        ],
        "value": [
            ["BOOLEAN", "$$ = $1"],
            ["NUMBER", "$$ = $1"],
            ["STRING", "$$ = $1"],
            ["REGEX", "$$ = $1"],
            ["NULL", "$$ = $1"],
            ["UNDEFINED", "$$ = $1"],
            ["object_literal", "$$ = $1"],
            ["array_literal", "$$ = $1"],
            ["lambda_literal", "$$ = $1"]
        ],
        "object_literal": [
            ["{ }", "$$ = {type: 'object', members: []}"],
            ["{ members }", "$$ = {type: 'object', members: $2}"]
        ],
        "array_literal": [
            ["[ ]", "$$ = {type: 'array', contents: []}"],
            ["[ arguments ]", "$$ = {type: 'array', contents: $2}"]
        ],
        "lambda_literal": [
            [
                "FUNC RETURN expression_without_comma",
                "$$ = {type: 'lambda', parameters: [], expression: $3}"
            ],
            [
                "FUNC ( ) RETURN expression_without_comma",
                "$$ = {type: 'lambda', parameters: [], expression: $5}"
            ],
            [
                "FUNC ( parameters ) RETURN expression_without_comma",
                "$$ = {type: 'lambda', parameters: $3, expression: $6}"
            ],
            [
                "FUNC block_statements",
                "$$ = {type: 'block_lambda', parameters: [], statements: $2}"
            ],
            [
                "FUNC ( ) block_statements",
                "$$ = {type: 'block_lambda', parameters: [], statements: $4}"
            ],
            [
                "FUNC ( parameters ) block_statements",
                "$$ = {type: 'block_lambda', parameters: $3, statements: $5}"
            ]
        ],
        "var_statement": [
            [
                "VAR IDENTIFIER ;",
                "$$ = {type: 'var', name: $2, value: undefined}"
            ],
            [
                "VAR IDENTIFIER = expression ;",
                "$$ = {type: 'var', name: $2, value: $4}"
            ]
        ],
        "val_statement": [
            [
                "VAL IDENTIFIER ;",
                "$$ = {type: 'val', name: $2, value: undefined}"
            ],
            [
                "VAL IDENTIFIER = expression ;",
                "$$ = {type: 'val', name: $2, value: $4}"
            ]
        ],
        "return_statement": [
            ["RETURN ;", "$$ = {type: 'return'}"],
            [
                "RETURN expression ;",
                "$$ = {type: 'return_value', value: $2}"
            ],
            [
                "RETURN IF expression ;",
                "$$ = {type: 'conditional_return', condition: $3}"
            ],
            [
                "RETURN expression IF expression ;",
                "$$ = {type: 'conditional_return_value', value: $2, condition: $4}"
            ]
        ],
        "func_statement": [
            [
                "FUNC IDENTIFIER RETURN expression ;",
                "$$ = {type: 'func', name: $2, parameters: [], expression: $4}"
            ],
            [
                "FUNC IDENTIFIER ( ) RETURN expression ;",
                "$$ = {type: 'func', name: $2, parameters: [], expression: $6}"
            ],
            [
                "FUNC IDENTIFIER ( parameters ) RETURN expression ;",
                "$$ = {type: 'func', name: $2, parameters: $4, expression: $7}"
            ],
            [
                "FUNC IDENTIFIER block_statements",
                "$$ = {type: 'block_func', name: $2, parameters: [], statements: $3}"
            ],
            [
                "FUNC IDENTIFIER ( ) block_statements",
                "$$ = {type: 'block_func', name: $2, parameters: [], statements: $5}"
            ],
            [
                "FUNC IDENTIFIER ( parameters ) block_statements",
                "$$ = {type: 'block_func', name: $2, parameters: $4, statements: $6}"
            ]
        ],
        "if_statement": [
            [
                "IF ( expression ) statement",
                "$$ = {type: 'if', condition: $3, statements: [$5]}"
            ],
            [
                "IF ( expression ) block_statements",
                "$$ = {type: 'if', condition: $3, statements: $5}"
            ]
        ],
        "else_statement": [
            ["ELSE block_statements", "$$ = {type: 'else', statements: $2}"],
            ["ELSE statement", "$$ = {type: 'else', statements: [$2]}"]
        ],
        "if_else_statement": [
            ["if_statement", "$$ = $1"],
            [
                "if_statement else_statement",
                "$$ = {type: 'if_else', 'if': $1, 'else': $2}"
            ]
        ],
        "break_statement": [
            ["BREAK ;", "$$ = {type: 'break'}"],
            [
                "BREAK IDENTIFIER ;",
                "$$ = {type: 'break_label', label: $2}"
            ],
            [
                "BREAK IF expression ;",
                "$$ = {type: 'conditional_break', condition: $3}"
            ],
            [
                "BREAK IDENTIFIER IF expression ;",
                "$$ = {type: 'conditional_break_label', label: $2, condition: $4}"
            ]
        ],
        "continue_statement": [
            ["CONTINUE ;", "$$ = {type: 'continue'}"],
            [
                "CONTINUE IDENTIFIER ;",
                "$$ = {type: 'continue_label', label: $2}"
            ],
            [
                "CONTINUE IF expression ;",
                "$$ = {type: 'conditional_continue', condition: $3}"
            ],
            [
                "CONTINUE IDENTIFIER IF expression ;",
                "$$ = {type: 'conditional_continue_label', label: $2, condition: $4}"
            ]
        ],
        "loop_statement": [
            [
                "LOOP block_statements",
                "$$ = {type: 'loop', statements: $2}"
            ],
            [
                "LOOP statement",
                "$$ = {type: 'loop', statements: [$2]}"
            ],
            [
                "LOOP IDENTIFIER block_statements",
                "$$ = {type: 'labeled_loop', label: $2, statements: $3}"
            ]
        ],
        "while_statement": [
            [
                "WHILE ( expression ) block_statements",
                "$$ = {type: 'while', condition: $3, statements: $5}"
            ],
            [
                "WHILE ( expression ) statement",
                "$$ = {type: 'while', condition: $3, statements: [$5]}"
            ],
            [
                "WHILE IDENTIFIER ( expression ) block_statements",
                "$$ = {type: 'labeled_while', label: $2, condition: $4, statements: $6}"
            ],
            [
                "WHILE IDENTIFIER ( expression ) statement",
                "$$ = {type: 'labeled_while', label: $2, condition: $4, statements: [$6]}"
            ]
        ],
        "for_statement": [
            [
                "FOR ( expression ; expression ; expression ) block_statements",
                "$$ = {type: 'for', init: $3, cond: $5, loop: $7, statements: $9}"
            ],
            [
                "FOR ( expression ; expression ; expression ) statement",
                "$$ = {type: 'for', init: $3, cond: $5, loop: $7, statements: [$9]}"
            ],
            [
                "FOR IDENTIFIER ( expression ; expression ; expression ) block_statements",
                "$$ = {type: 'labeled_for', label: $2, init: $4, cond: $6, loop: $8, statements: $10}"
            ],
            [
                "FOR IDENTIFIER ( expression ; expression ; expression ) statement",
                "$$ = {type: 'labeled_for', label: $2, init: $4, cond: $6, loop: $8, statements: [$10]}"
            ],
            [
                "FOR ( var_statement expression ; expression ) block_statements",
                "$$ = {type: 'for', init: $3, cond: $4, loop: $6, statements: $8}"
            ],
            [
                "FOR ( var_statement expression ; expression ) statement",
                "$$ = {type: 'for', init: $3, cond: $4, loop: $6, statements: [$8]}"
            ],
            [
                "FOR IDENTIFIER ( var_statement expression ; expression ) block_statements",
                "$$ = {type: 'labeled_for', label: $2, init: $4, cond: $5, loop: $7, statements: $9}"
            ],
            [
                "FOR IDENTIFIER ( var_statement expression ; expression ) statement",
                "$$ = {type: 'labeled_for', label: $2, init: $4, cond: $5, loop: $7, statements: [$9]}"
            ],
            [
                "FOR ( VAR IDENTIFIER IN expression ) block_statements",
                "$$ = {type: 'for_in', key: $4, object: $6, statements: $8}"
            ],
            [
                "FOR ( VAR IDENTIFIER IN expression ) statement",
                "$$ = {type: 'for_in', key: $4, object: $6, statements: [$8]}"
            ],
            [
                "FOR IDENTIFIER ( VAR IDENTIFIER IN expression ) block_statements",
                "$$ = {type: 'labeled_for_in', label: $2, key: $5, object: $7, statements: $9}"
            ],
            [
                "FOR IDENTIFIER ( VAR IDENTIFIER IN expression ) statement",
                "$$ = {type: 'labeled_for_in', label: $2, key: $5, object: $7, statements: [$9]}"
            ],
            [
                "FOR ( VAR IDENTIFIER , IDENTIFIER IN expression ) block_statements",
                "$$ = {type: 'for_pair_in', key: $4, value: $6, object: $8, statements: $10}"
            ],
            [
                "FOR ( VAR IDENTIFIER , IDENTIFIER IN expression ) statement",
                "$$ = {type: 'for_pair_in', key: $4, value: $6, object: $8, statements: [$10]}"
            ],
            [
                "FOR IDENTIFIER ( VAR IDENTIFIER , IDENTIFIER IN expression ) block_statements",
                "$$ = {type: 'labeled_for_pair_in', label: $2, key: $5, value: $7, object: $9, statements: $11}"
            ],
            [
                "FOR IDENTIFIER ( VAR IDENTIFIER , IDENTIFIER IN expression ) statement",
                "$$ = {type: 'labeled_for_pair_in', label: $2, key: $5, value: $7, object: $9, statements: [$11]}"
            ]
        ]
    }
}
